{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["Form","setInputText","todos","setTodos","inputText","setStatus","setFilteredTodos","type","className","value","onChange","e","target","onClick","preventDefault","newTodo","id","Math","floor","random","text","completed","name","Todo","todo","map","item","filter","TodoList","filteredTodos","App","useState","status","useEffect","todoFilter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LAEaA,EAAO,SAAC,GAA6E,IAA5EC,EAA2E,EAA3EA,aAAcC,EAA6D,EAA7DA,MAAOC,EAAsD,EAAtDA,SAAUC,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,UAAiC,EAAtBC,iBAiBvE,OACI,iCACI,uBAAOC,KAAK,OAAOC,UAAU,aAAaC,MAAOL,EAAWM,SAAU,SAACC,GAAD,OAAOV,EAAaU,EAAEC,OAAOH,UACnG,wBAAQI,QAlBG,SAACF,GAChBA,EAAEG,iBAEF,IAAMC,EAAU,CACZC,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMhB,EACNiB,WAAW,GAGflB,EAAS,GAAD,mBAAKD,GAAL,CAAYa,KAGpBd,EAAa,KAMmBO,UAAU,cAAcD,KAAK,SAAzD,SACI,mBAAGC,UAAU,yBAEjB,qBAAKA,UAAU,SAAf,SACI,yBAAQc,KAAK,QAAQd,UAAU,cAAcE,SAAU,SAACC,GAAD,OAAON,EAAUM,EAAEC,OAAOH,QAAjF,UACI,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,YAAd,uBACA,wBAAQA,MAAM,cAAd,kC,OC1BPc,EAAO,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAAMtB,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SAuBhC,OACI,sBAAKK,UAAU,QAAf,UACI,oBAAIA,UAAS,oBAAegB,EAAKH,UAAY,YAAc,IAA3D,SACKG,EAAKJ,OAEV,wBAAQZ,UAAU,eAAeK,QArBpB,WACjBV,EACID,EAAMuB,KACF,SAACC,GACG,OACIA,EAAKV,KAAOQ,EAAKR,GAErB,2BACOU,GADP,IACaL,WAAYK,EAAKL,YAG/BK,OAUP,SACI,mBAAGlB,UAAU,mBAEjB,wBAAQA,UAAU,YAAYK,QA7BnB,WACfV,EAASD,EAAMyB,QAAO,SAACD,GAAD,OAAUA,EAAKV,KAAOQ,EAAKR,QA4B7C,SACI,mBAAGR,UAAU,uBC/BhBoB,EAAW,SAAC,GAAsC,IAArC1B,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,SAAU0B,EAAmB,EAAnBA,cACvC,OACI,qBAAKrB,UAAU,iBAAf,SACI,oBAAIA,UAAU,YAAd,SACKqB,EAAcJ,KAAI,SAACD,GAAD,OAAW,cAAC,EAAD,CAAMtB,MAAOA,EAAOC,SAAUA,EAAUqB,KAAMA,GAAWA,EAAKR,YC2C7Fc,MA7Cf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACN3B,EADM,KACKH,EADL,OAEa8B,mBAAS,IAFtB,mBAEN7B,EAFM,KAECC,EAFD,OAGe4B,mBAAS,OAHxB,mBAGNC,EAHM,KAGE3B,EAHF,OAI6B0B,mBAAS,IAJtC,mBAINF,EAJM,KAISvB,EAJT,KAMb2B,qBAAU,WACRC,MACC,CAAChC,EAAO8B,IAEb,IAAME,EAAa,WACjB,OAAQF,GACN,IAAK,YACH1B,EAAiBJ,EAAMyB,QAAO,SAAAH,GAAI,OAAuB,IAAnBA,EAAKH,cAC3C,MACF,IAAK,cACHf,EAAiBJ,EAAMyB,QAAO,SAAAH,GAAI,OAAIA,EAAKH,cAC7C,MACA,QACEf,EAAiBJ,KAKrB,OACE,sBAAKM,UAAU,MAAf,UACE,iCACE,oDAEF,gCACE,cAAC,EAAD,CAAMJ,UAAWA,EACfD,SAAUA,EACVF,aAAcA,EACdC,MAAOA,EACPG,UAAWA,IAIb,cAAC,EAAD,CAAUH,MAAOA,EAAOC,SAAUA,EAAUG,iBAAkBA,EAAkBuB,cAAeA,WCtCvGM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a1f1bcb6.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\n\r\nexport const Form = ({setInputText, todos, setTodos, inputText, setStatus, setFilteredTodos}) => {\r\n\r\n    const submitTodo = (e) => {\r\n        e.preventDefault();\r\n\r\n        const newTodo = {\r\n            id: Math.floor(Math.random() * 1000),\r\n            text: inputText,\r\n            completed: false,\r\n        };\r\n\r\n        setTodos([...todos, newTodo]);\r\n\r\n        // Clear input after we added a new todo. Wouldn't a useEffect work nicely here?\r\n        setInputText(\"\");\r\n    }\r\n// This input tag needs to be connected to the inputText state so that it can render that UI.\r\n    return (\r\n        <form>\r\n            <input type=\"text\" className=\"todo-input\" value={inputText} onChange={(e) => setInputText(e.target.value)} />\r\n            <button onClick={submitTodo}className=\"todo-button\" type=\"submit\">\r\n                <i className=\"fas fa-plus-square\"></i>\r\n            </button>\r\n            <div className=\"select\">\r\n                <select name=\"todos\" className=\"filter-todo\" onChange={(e) => setStatus(e.target.value)}>\r\n                    <option value=\"all\">All</option>\r\n                    <option value=\"completed\">Completed</option>\r\n                    <option value=\"uncompleted\">Uncompleted</option>\r\n                </select>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n","import React from 'react'\r\n\r\n\r\nexport const Todo = ({ todo, todos, setTodos}) => {\r\n\r\n    const deleteTodo = () => {\r\n        setTodos(todos.filter((item) => item.id !== todo.id))\r\n        \r\n    };\r\n\r\n    const completeTodo = () => {\r\n        setTodos(\r\n            todos.map(\r\n                (item) => {\r\n                    if (\r\n                        item.id === todo.id\r\n                    )\r\n                    return{ \r\n                        ...item, completed: !item.completed\r\n                    }\r\n\r\n            return item    }\r\n            )\r\n        )\r\n}\r\n// The cool thing here is that we hooked up some css to a state change of 'completed'\r\n    return (\r\n        <div className='todo '>\r\n            <li className={`todo-item ${todo.completed ? 'completed' : ''}` }>\r\n                {todo.text}\r\n            </li>\r\n            <button className='complete-btn' onClick={completeTodo}>\r\n                <i className='fas fa-check'></i>\r\n            </button>\r\n            <button className='trash-btn' onClick={deleteTodo} >\r\n                <i className='fas fa-trash'></i>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Todo} from './Todo'\r\n\r\n\r\nexport const TodoList = ({todos, setTodos, filteredTodos}) => {\r\n    return (\r\n        <div className=\"todo-container\">\r\n            <ul className=\"todo-list\">\r\n                {filteredTodos.map((todo) => (<Todo todos={todos} setTodos={setTodos} todo={todo} key={todo.id} />))}\r\n            </ul>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React, {useState, useEffect} from 'react'\r\nimport './App.css';\r\nimport {Form} from './components/Form'\r\nimport {TodoList} from './components/TodoList'\r\n\r\n\r\nfunction App() {\r\n  const [inputText, setInputText] = useState(\"\")\r\n  const [todos, setTodos] = useState([]);\r\n  const [status, setStatus] = useState(\"all\");\r\n  const [filteredTodos, setFilteredTodos] = useState([]);\r\n\r\n  useEffect(() => {\r\n    todoFilter()\r\n  }, [todos, status])\r\n\r\nconst todoFilter = () => {\r\n  switch (status) {\r\n    case 'completed':\r\n      setFilteredTodos(todos.filter(todo => todo.completed === true))\r\n      break;\r\n    case 'uncompleted': \r\n      setFilteredTodos(todos.filter(todo => todo.completed))\r\n    break;\r\n    default:\r\n      setFilteredTodos(todos);\r\n  }\r\n} \r\n\r\n\r\n  return (\r\n    <div className='App' >\r\n      <header>\r\n        <h1>Will's todo list</h1>\r\n      </header>\r\n      <div>\r\n        <Form inputText={inputText} \r\n          setTodos={setTodos} \r\n          setInputText={setInputText} \r\n          todos={todos} \r\n          setStatus={setStatus}\r\n          \r\n          />\r\n        \r\n        <TodoList todos={todos} setTodos={setTodos} setFilteredTodos={setFilteredTodos} filteredTodos={filteredTodos}/>\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}